3006. Find Beautiful Indices in the Given Array I

class Solution {
public:
    void computeLPS(string A, vector<int>& LPS) {
        int m = A.length();
        int len = 0; 

        LPS[0] = 0; 

        int i = 1;
        while (i < m) {
            if (A[i] == A[len]) {
                len++;
                LPS[i] = len;
                i++;
            } else {
                if (len != 0) {
                    len = LPS[len - 1];
                } else {
                    LPS[i] = 0;
                    i++;
                }
            }
        }
    }

    vector<int> KMP(string pat, string s) {
        int n = s.length();
        int m = pat.length();
        vector<int> result;

        vector<int> LPS(m, 0);
        computeLPS(pat, LPS);

        int i = 0; 
        int j = 0; 

        while (i < n) {
            if (pat[j] == s[i]) {
                i++;
                j++;
            }

            if (j == m) {
                result.push_back(i-j); 
                j = LPS[j - 1];
            } else if (i < n && pat[j] != s[i]) {
                if (j != 0) {
                    j = LPS[j - 1];
                } else {
                    i++;
                }
            }
        }

        return result;
    }

   vector<int> beautifulIndices(string s, string a, string b, int k) {
        int n = s.length();
        vector<int> i_indices = KMP(a, s);
        vector<int> j_indices = KMP(b, s);

        vector<int> result;
        for (int& i : i_indices) {
           
            int left_limit = max(0, i - k);
            int right_limit = min(n - 1, i + k);

            auto it = lower_bound(begin(j_indices), end(j_indices), left_limit);

           
            if (it != j_indices.end() && *it <= right_limit) {
              
                result.push_back(i);
            }
        }
        return result;
    }
};
