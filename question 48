1425. Constrained Subsequence Sum

ap-1) by LIS and recursion 
class Solution {
public:
    int n;
    int K;
    int solve(int prev, int i, vector<int>& nums){
        int result=0;
        if(i>=n){
            return 0;
        }
        if(prev== -1 || i-prev<=K){
            int take= nums[i]+solve(i,i+1,nums);
            int not_take=solve(prev,i+1,nums);
            result=max(take,not_take);

        }
        return result;        
    }
    int constrainedSubsetSum(vector<int>& nums, int k) {
        n=nums.size();
        K=k;
        int val=solve(-1,0,nums);
        if(val==0){
            val=*max_element(begin(nums),end(nums));
        }
        return val;
    }
};
Time Limit Exceeded
8 / 40 testcases passed

2)improvered add memo to it

class Solution {
public:
    int n;
    int K;
    unordered_map<string,int>mp;
    int solve(int prev, int i, vector<int>& nums){
        int result=0;
        if(i>=n){
            return 0;
        }
        string key=to_string(prev)+"_"+to_string(i);
        if(mp.find(key)!=mp.end()){
            return mp[key];
        }
        if(prev== -1 || i-prev<=K){
            int take= nums[i]+solve(i,i+1,nums);
            int not_take=solve(prev,i+1,nums);
            result=max(take,not_take);

        }
        return mp[key]= result;        
    }
    int constrainedSubsetSum(vector<int>& nums, int k) {
        n=nums.size();
        K=k;
        int val=solve(-1,0,nums);
        if(val==0){
            val=*max_element(begin(nums),end(nums));
        }
        return val;
    }
};
Time Limit Exceeded
18 / 40 testcases passed

3) bottom -up 

class Solution {
public:
   
    int constrainedSubsetSum(vector<int>& nums, int k) {
        int n=nums.size();
         vector<int>t(n);
        for(int i=0;i<n;i++){
            t[i]=nums[i];
        }
        int result=t[0];
        for(int i=1;i<n;i++){
            for(int j=i-1;j>=0 && i-j<=k;j--){
                t[i]=max(t[i],nums[i]+t[j]);
                    result=max(result,t[i]);
            }
        }
        return result;
    }
};
Time Limit Exceeded
20 / 40 testcases passed

optimal)
4) max_heap
class Solution {
public:
   
    int constrainedSubsetSum(vector<int>& nums, int k) {
        int n=nums.size();
         vector<int>t(n);
        for(int i=0;i<n;i++){
            t[i]=nums[i];
        }
        priority_queue<pair<int,int>>pq;
        pq.push({t[0],0});
        int result=t[0];
        for(int i=1;i<n;i++){
            
            while(!pq.empty() && i-pq.top().second>k){
                pq.pop();
            }
            t[i]=max(t[i],nums[i]+pq.top().first);
            pq.push({t[i],i});
            result=max(result,t[i]);
            }

        
        return result;
    }
};
tc(O(nlongn))
